// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;
using Payments.Infrastructure.Persistence.StoredModel;

#nullable disable

namespace Payments.Infrastructure.Migrations
{
    [DbContext(typeof(StoredDbContext))]
    [Migration("20250522212358_AddTracingToOutbox")]
    partial class AddTracingToOutbox
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.4")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("Joseco.Outbox.Contracts.Model.OutboxMessage<Joseco.DDD.Core.Abstractions.DomainEvent>", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("outboxId");

                    b.Property<string>("Content")
                        .HasColumnType("text")
                        .HasColumnName("content");

                    b.Property<string>("CorrelationId")
                        .HasColumnType("text")
                        .HasColumnName("correlationId");

                    b.Property<DateTime>("Created")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created");

                    b.Property<bool>("Processed")
                        .HasColumnType("boolean")
                        .HasColumnName("processed");

                    b.Property<DateTime?>("ProcessedOn")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("processedOn");

                    b.Property<string>("SpanId")
                        .HasColumnType("text")
                        .HasColumnName("spanId");

                    b.Property<string>("TraceId")
                        .HasColumnType("text")
                        .HasColumnName("traceId");

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("type");

                    b.HasKey("Id");

                    b.ToTable("outboxMessage", "outbox");
                });

            modelBuilder.Entity("Payments.Infrastructure.Persistence.StoredModel.Entities.PaymentStoredModel", b =>
                {
                    b.Property<Guid>("PaymentId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("paymentId");

                    b.Property<double>("Amount")
                        .HasColumnType("decimal(18,2)")
                        .HasColumnName("amount");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("createdOn");

                    b.Property<DateTime?>("PaidOn")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("paidOn");

                    b.Property<Guid?>("SourceId")
                        .HasColumnType("uuid")
                        .HasColumnName("sourceId");

                    b.Property<string>("SourceType")
                        .HasMaxLength(25)
                        .HasColumnType("character varying(25)")
                        .HasColumnName("sourceType");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasMaxLength(25)
                        .HasColumnType("character varying(25)")
                        .HasColumnName("status");

                    b.HasKey("PaymentId");

                    b.ToTable("payment");
                });
#pragma warning restore 612, 618
        }
    }
}
